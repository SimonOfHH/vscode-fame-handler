{
  "name": "vscode-fame-handler",
  "displayName": "FAME Handler",
  "publisher": "SimonOfHH",
  "description": "An Extension to make working with the App Management APIs for Microsofts Embed App program easier and to give it an UI (FAME repository).",
  "icon": "assets/lcs-favicon.png",
  "version": "0.0.4",
  "engines": {
    "vscode": "^1.86.0"
  },
  "repository": {
    "type": "github",
    "url": "https://github.com/SimonOfHH/vscode-fame-handler"
  },
  "author": {
    "name": "Simon Fischer",
    "url": "https://github.com/SimonOfHH"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onView:famehandler"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "famehandler.signInCommand",
        "title": "FAME: Sign In"
      },
      {
        "command": "famehandler.clearCacheCommand",
        "title": "FAME: Clear Cache"
      },
      {
        "command": "famehandler.exportAppMapCommand",
        "title": "FAME: Export App-ID-Name-Map"
      },
      {
        "command": "famehandler.importAppMapCommand",
        "title": "FAME: Import App-ID-Name-Map"
      },
      {
        "command": "famehandler.validateManifestCommand",
        "title": "FAME: Validate manifest.json"
      },
      {
        "command": "famehandler.testUserCommand",
        "title": "FAME: Test User Command"
      },
      {
        "command": "famehandler.loadAllAppInfoCommand",
        "title": "Load app metadata from chlid nodes"
      },
      {
        "command": "famehandler.refreshEntryCommand",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "famehandler.uploadAppVersionCommand",
        "title": "Upload App Version",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "famehandler.uploadAppsFromDirectoryCommand",
        "title": "Upload all Apps from directory",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "famehandler.updateAppVersionCommand",
        "title": "Update Version..."
      },
      {
        "command": "famehandler.addAppPrincipalCommand",
        "title": "Add Principal"
      },
      {
        "command": "famehandler.updateAppPrincipalCommand",
        "title": "Update Principal..."
      },
      {
        "command": "famehandler.removeAppPrincipalCommand",
        "title": "Remove Principal"
      },
      {
        "command": "famehandler.setDataCommand",
        "title": "Set Data"
      },
      {
        "command": "famehandler.statusBarUpdateCommand",
        "title": "Update Status Bar"
      },
      {
        "command": "famehandler.downloadAppVersionCommand",
        "title": "Download..."
      },
      {
        "command": "famehandler.inspectAppVersionNavxCommand",
        "title": "Inspect NAVX Manifest"
      },
      {
        "command": "famehandler.assignAppToCountryCommand",
        "title": "Assign to country..."
      },
      {
        "command": "famehandler.scheduleEnvironmentHotfixFromEnvironmentCommand",
        "title": "Schedule Hotfix..."
      },
      {
        "command": "famehandler.scheduleEnvironmentHotfixFromVersionCommand",
        "title": "Schedule Hotfix..."
      },
      {
        "command": "famehandler.updateEnvironmentHotfixCommand",
        "title": "Update Hotfix..."
      },
      {
        "command": "famehandler.sortAppsByOriginalOrderCommand",
        "title": "... by original order"
      },
      {
        "command": "famehandler.sortAppsByIdCommand",
        "title": "... by App ID"
      },
      {
        "command": "famehandler.sortAppsByNameCommand",
        "title": "... by App name"
      },
      {
        "command": "famehandler.createDatabaseExportSasCommand",
        "title": "FAME: Create database export SAS"
      },
      {
        "command": "famehandler.selectAzureSubscriptionCommand",
        "title": "FAME: Select Azure subscription"
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "famehandler",
          "title": "FAME Handler",
          "icon": "assets/lcs-favicon.ico"
        }
      ]
    },
    "views": {
      "famehandler": [
        {
          "type": "tree",
          "id": "famehandler.appsView",
          "name": "Apps"
        },
        {
          "type": "webview",
          "id": "famehandler.detailsView",
          "name": "API Response"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "famehandler.appsView",
        "contents": "You need to sign in, before anything can be shown here. Also make sure that settings are correctly configured.\n[Sign in](command:famehandler.signInCommand)\n[Help](command:famehandler.signInCommand)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "famehandler.refreshEntryCommand",
          "when": "view == famehandler.appsView",
          "group": "navigation"
        },
        {
          "submenu": "famehandler.sorting",
          "when": "view == famehandler.appsView",
          "group": "navigation"
        },
        {
          "command": "famehandler.loadAllAppInfoCommand",
          "when": "view == famehandler.appsView"
        },
        {
          "command": "famehandler.uploadAppsFromDirectoryCommand",
          "when": "view == famehandler.appsView"
        }
      ],
      "view/item/context": [
        {
          "command": "famehandler.uploadAppVersionCommand",
          "when": "view == famehandler.appsView && viewItem == countrySubEntityVersions",
          "group": "famehandler@0"
        },
        {
          "command": "famehandler.downloadAppVersionCommand",
          "when": "view == famehandler.appsView && viewItem == countryVersion",
          "group": "famehandler@1"
        },
        {
          "command": "famehandler.inspectAppVersionNavxCommand",
          "when": "view == famehandler.appsView && viewItem == countryVersion",
          "group": "famehandler@2"
        },
        {
          "command": "famehandler.updateAppVersionCommand",
          "when": "view == famehandler.appsView && viewItem == countryVersion",
          "group": "famehandler@0"
        },
        {
          "command": "famehandler.addAppPrincipalCommand",
          "when": "view == famehandler.appsView && viewItem == subentityPrincipal",
          "group": "famehandler@0"
        },
        {
          "command": "famehandler.updateAppPrincipalCommand",
          "when": "view == famehandler.appsView && viewItem == principal",
          "group": "famehandler@0"
        },
        {
          "command": "famehandler.removeAppPrincipalCommand",
          "when": "view == famehandler.appsView && viewItem == principal",
          "group": "famehandler@1"
        },
        {
          "command": "famehandler.assignAppToCountryCommand",
          "when": "view == famehandler.appsView && viewItem == fameapp",
          "group": "famehandler@0"
        },
        {
          "command": "famehandler.scheduleEnvironmentHotfixFromEnvironmentCommand",
          "when": "view == famehandler.appsView && viewItem == environment",
          "group": "famehandler@0"
        },
        {
          "command": "famehandler.scheduleEnvironmentHotfixFromVersionCommand",
          "when": "view == famehandler.appsView && viewItem == countryVersion",
          "group": "famehandler@0"
        },
        {
          "command": "famehandler.updateEnvironmentHotfixCommand",
          "when": "view == famehandler.appsView && viewItem == environmentHotfix",
          "group": "famehandler@0"
        }
      ],
      "famehandler.sorting": [
        {
          "command": "famehandler.sortAppsByOriginalOrderCommand",
          "group": "1_sortBy@0"
        },
        {
          "command": "famehandler.sortAppsByIdCommand",
          "group": "1_sortBy@1"
        },
        {
          "command": "famehandler.sortAppsByNameCommand",
          "group": "1_sortBy@2"
        }
      ],
      "commandPalette": [
        {
          "command": "famehandler.refreshEntryCommand",
          "when": "false"
        },
        {
          "command": "famehandler.loadAllAppInfoCommand",
          "when": "false"
        },
        {
          "command": "famehandler.uploadAppsFromDirectoryCommand",
          "when": "false"
        },
        {
          "command": "famehandler.uploadAppVersionCommand",
          "when": "false"
        },
        {
          "command": "famehandler.setDataCommand",
          "when": "false"
        },
        {
          "command": "famehandler.updateAppVersionCommand",
          "when": "false"
        },
        {
          "command": "famehandler.addAppPrincipalCommand",
          "when": "false"
        },
        {
          "command": "famehandler.updateAppPrincipalCommand",
          "when": "false"
        },
        {
          "command": "famehandler.removeAppPrincipalCommand",
          "when": "false"
        },
        {
          "command": "famehandler.statusBarUpdateCommand",
          "when": "false"
        },
        {
          "command": "famehandler.assignAppToCountryCommand",
          "when": "false"
        },
        {
          "command": "famehandler.scheduleEnvironmentHotfixFromEnvironmentCommand",
          "when": "false"
        },
        {
          "command": "famehandler.scheduleEnvironmentHotfixFromVersionCommand",
          "when": "false"
        },
        {
          "command": "famehandler.updateEnvironmentHotfixCommand",
          "when": "false"
        },
        {
          "command": "famehandler.sortAppsByOriginalOrderCommand",
          "when": "false"
        },
        {
          "command": "famehandler.sortAppsByIdCommand",
          "when": "false"
        },
        {
          "command": "famehandler.sortAppsByNameCommand",
          "when": "false"
        }
      ]
    },
    "submenus": [
      {
        "id": "famehandler.sorting",
        "label": "Sort...",
        "icon": "$(fold-down)"
      }
    ],
    "configuration": {
      "title": "FAME Handler",
      "properties": {
        "famehandler.api.tenantId": {
          "type": "string",
          "default": "",
          "description": "The tenantId of the AAD tenant you're working in."
        },
        "famehandler.api.clientId": {
          "type": "string",
          "default": "",
          "description": "The clientId of the AAD App Registration for the API access."
        },
        "famehandler.defaults.countrySelection": {
          "type": "array",
          "default": [
            "NL",
            "DE",
            "GB",
            "IE",
            "FR"
          ]
        },
        "famehandler.defaults.principalSets": {
          "type": "object",
          "description": "",
          "properties": {
            "defaults": {
              "type": "array",
              "properties": {
                "countryCode": {
                  "type": "string"
                },
                "values": {
                  "type": "array",
                  "properties": {
                    "principalType": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "famehandler.showPlaceholder": {
          "type": "boolean",
          "default": false,
          "description": "Used for demos to avoid showing information not meant to be shown"
        },
        "famehandler.azureSubscriptionId": {
          "type": "string",
          "default": "00000000-0000-0000-0000-000000000000",
          "description": "Azure subscription id. Used for creating backup URI"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@azure/identity-vscode": "^1.0.0",
    "@types/mocha": "^10.0.6",
    "@types/node": "18.x",
    "@types/node-gzip": "^1.1.3",
    "@types/semver": "^7.5.8",
    "@types/vscode": "^1.86.0",
    "@typescript-eslint/eslint-plugin": "^7.11.0",
    "@typescript-eslint/parser": "^7.11.0",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.4.0",
    "esbuild": "^0.21.4",
    "eslint": "^8.57.0",
    "node-loader": "^2.0.0",
    "npm-run-all": "^4.1.5",
    "open": "^10.1.0",
    "typescript": "^5.4.5"
  },
  "dependencies": {
    "@azure/arm-resources": "^5.2.0",
    "@azure/arm-storage": "^18.2.0",
    "@azure/arm-subscriptions": "^5.1.0",
    "@azure/identity": "^4.2.0",
    "@azure/identity-vscode": "^1.0.0",
    "@azure/msal-node": "^2.9.1",
    "@azure/storage-blob": "^12.17.0",
    "@microsoft/vscode-azext-azureauth": "^3.0.0",
    "axios": "^1.6.8",
    "fast-xml-parser": "^4.3.5",
    "node-gzip": "^1.1.2",
    "node-stream-zip": "^1.15.0",
    "table": "^6.8.1"
  },
  "extensionDependencies": [
    "ms-vscode.azure-account"
  ]
}
